#!/usr/bin/env python
PACKAGE = "fav_state_estimation"

import roslib
roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

constant_targets = gen.add_group('constant_targets')
constant_targets.add("x_setpoint", double_t, 0, "x Setpoint", 0.7, 0.1, 1.4)
constant_targets.add("y_setpoint", double_t, 0, "y Setpoint", 2.0, 0.1, 3.25)
constant_targets.add("z_setpoint", double_t, 0, "z Setpoint", -0.6, -0.8, -0.2)
constant_targets.add("yaw_setpoint", double_t, 0, "yaw Setpoint in degree", 90, -180, 180)

x_trajectories = gen.add_group('x_trajectories')
x_trajectories.add("x_trajectory", int_t, 0, "Trajectory in x-direction",    0, 0, 2)
x_trajectories.add("x_mean", double_t, 0, "Mean of Wave", 0.7, 0.5, 0.9)
x_trajectories.add("x_amplitude", double_t, 0, "Amplitude of Wave", 0.15, 0, 0.2)
x_trajectories.add("x_frequency", double_t, 0, "Frequency of Wave", 0.01, 0, 0.05)

y_trajectories = gen.add_group('y_trajectories')
y_trajectories.add("y_trajectory", int_t, 0, "Trajectory in y-direction",    0, 0, 2)
y_trajectories.add("y_mean", double_t, 0, "Mean of Wave", 2.0, 1.5, 2.5)
y_trajectories.add("y_amplitude", double_t, 0, "Amplitude of Wave", 0.15, 0, 0.2)
y_trajectories.add("y_frequency", double_t, 0, "Frequency of Wave", 0.05, 0, 0.05)

z_trajectories = gen.add_group('z_trajectories')
z_trajectories.add("z_trajectory", int_t, 0, "Trajectory in z-direction",    0, 0, 2)
z_trajectories.add("z_mean", double_t, 0, "Mean of Wave", -0.55, -0.6, -0.4)
z_trajectories.add("z_amplitude", double_t, 0, "Amplitude of Wave", 0.15, 0, 0.2)
z_trajectories.add("z_frequency", double_t, 0, "Frequency of Wave", 0.05, 0, 0.15)

yaw_trajectories = gen.add_group('yaw_wave')
yaw_trajectories.add("yaw_sine_wave", bool_t, 0, "Sine Wave in Yaw",    False)
yaw_trajectories.add("yaw_amplitude", double_t, 0, "Amplitude of Wave", 15, 0, 45)
yaw_trajectories.add("yaw_frequency", double_t, 0, "Frequency of Wave", 0.05, 0, 0.2)

exit(gen.generate(PACKAGE, "state_estimation", "Setpoint"))
